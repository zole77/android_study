SQLite는 MyAQL이나 PostgreSQL과 같은 데이터베이스 관리 시스템이지만, 
서버가 아니라 응응프로그램에 넣어 사용하는 비교적 가벼운 데이터베이스이다.
일반적인 RDBMS에 비해 대규모 작업에는 적합하지 않지만, 중소 규모라면 속도에 손색이 없다. 
또 API는 단순히 라이브러리를 호출하는 것만 있으며, 데이터를 저장하는 데 하나의 파일만을 사용하는 것이 특징이다.

위키피디아에 수록된 내용이다.
MySQL은 학부생일때도 잠깐 다뤄봤고, java 공부를 하면서 간단한 게시판을 짜보면서도 활용해본 적 있어서 꽤나 익숙한 데이터베이스지만 개념에 대한 정리도 필요할 것 같아서 블로그 등을 뒤적거리며 작성해볼까 한다.
실습을 통해 알게된 것은 확실히 위키피디아에 수록된 내용처럼 비교적 가벼운 데이터베이스이고 서버와 통신없이 프로그램 즉, 어플리케이션안에 넣어서 사용하는 용도로서 사용자간 데이터 교환이 없고 어플리케이션과 사용자간의 상호작용만을 필요로 할 때 쓰면 적합할 것 같다고 판단했다.

데이터베이스의 간단한 개념도 정리해보고자 한다.
1. 테이블
테이블은 데이터들이 저장된 공간이다. 어떠한 주제에 대한 데이터들을 담고 있어 하나의 데이터베이스 안에는 여러개의 테이블이 존재할 수 있다.

2. 필드
필드는 각 항목들의 "열" 정도로 볼 수 있다. 가령 학생부가 있다면 번호, 이름, 휴대전화번호가 될 것이다.

3. 레코드
레코드는 각 항목들의 "행" 정도로 볼 수 있다. 학생부에서는 1번, 박범수, 010-0000-0000이 된다.


안드로이드에서는 데이터베이스를 다루기 위해 데이터베이스 어댑터가 필요하다. 따라서 이러한 작업을 도와주는 메소드는 SQLiteDatabase 와 SQLiteOpenHelper 가 있다.
SQLiteDatabase 클래스는 데이터베이스를 다루는 작업을 담당한다. 데이터 추가, 데이터 삭제, 데이터 수정, 쿼리가 여기에 해당된다.
SQLiteOpenHelper 클래스는 데이터베이스의 생성, 열기, 업그레이드 등을 담당한다. 
이렇게 클래스 내의 메소드로 데이터베이스를 관리할 수 있지만, 코드상에 데이터베이스 구조들이 드러나는 것과 코드 자체의 가독성이 떨어지기 때문에 데이터베이스 어댑터를 만들어서 이 어댑터를 통해 데이터베이스를 관리한다.

나는 어댑터가 리사이클러뷰를 활용할 때도 보였지만, 제대로 이해하기에도 급급했기 때문에 이 기회에 어댑터에 대한 이해도 바로 잡아볼까 한다.

어댑터(Adapter)란?
Adapter는 하나의 Object, View와 View에 올릴 Data를 연결하는 일종의 Bridge라고 한다.
즉, 데이터의 원본을 받아 관리하고, 어댑터뷰가 출력할 수 있는 형태로 데이터를 제공하는 중간 객체 역할을 한다는 것이다.
어댑터는 ArrayAdapter, CursorAdapter, SimpleAdapter 등등 있다.
어댑터는 어댑터 뷰가 출력할 수 있는 데이터로 만들어 놓는 공간,
어댑터뷰는 이 데이터를 출력하는 역할을 하게 된다.
이때 어댑터와 연결된 원본 데이터가 변경됐을 시 notifyDataSetChanged 메서드를 호출하여 어댑터 뷰에 원본이 변경되었다고 알려주어 어댑터 뷰를 수정할 수 있다.

실제로 리사이클러뷰를 직접 클론코딩하고 사용해보았을 때 notifyDataSetChanged 라는 메서드를 호출하는 부분이 있었던 것으로 기억하는데, 이런 역할을 한다고 정확하게 이해하면 될 것 같다.


데이터베이스에서 원하는 자료를 받아오기 위한 것을 명령어를 쿼리라고 한다.
쿼리를 실행한 결과는 Cursor 객체 형태로 반환된다.

데이터베이스 값을 가지는 객체인 Cursors와 ContentValues
데이터베이스에서 자료를 가져올 때는 그 자료가 특정한 값 하나가 될 수도 있고, 레코드(한 라인)가 될 수도 있고, 혹은 데이터 전체가 될 수도 있다.
이런 자료들을 받아오기 위해서 Cursor 인터페이스를 사용하는데, 커서는 쿼리 결과로 나온 레코드를 가리키는 말 그대로 마우스 커서와 같은 역할을 한다. 결과 레코드가 여러 개일 경우엔 커서를 이리저리 움직이며 여러 레코드들의 데이터들을 받아올 수 있다.

Cursor의 주요 메소드는 다음과 같다.
moveToFirst  커서가 쿼리(질의) 결과 레코드들 중에서 가장 처음에 위치한 레코드를 가리키도록 합니다.
moveToNext  다음 레코드로 커서를 이동합니다.
moveToPrevious  이전 레코드로 커서를 이동합니다.
getCount  질의 결과값(레코드)의 갯수를 반환합니다.
getColumnIndexOrThrow  특정 필드의 인덱스값을 반환하며, 필드가 존재하지 않을경우 예외를 발생시킵니다.
getColumnName  특정 인덱스값에 해당하는 필드 이름을 반환합니다.
getColumnNames  필드 이름들을 String 배열 형태로 반환합니다.
moveToPosition  커서를 특정 레코드로 이동시킵니다.
getPosition  커서가 현재 가리키고 있는 위치를 반환합니다.

코드에서 데이터베이스에 자료를 입력하는 ContentValues 객체는 데이터베이스의 레코드와 동일하게 사용한다. ContentValues 객체에 데이터베이스 테이블에 맞게 자료를 입력한 후 SQLiteDatabase 클래스의 insert()메소드를 사용하여 데이터베이스에 추가가 가능하다.

